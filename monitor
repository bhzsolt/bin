#!/bin/bash
# bodoki-halmen zsolt
# monitor setup wrapper
#set foldmethod=marker
#set foldmarker={,}

test_function() { 
	local -a 'device=("${'"$1"'[@]}")'
	echo 'device = ('${device[@]}')'
}
# not this, because of word splitting test_f() { local -a 'arr=("${'"$1"'[*]}")'; echo ${arr[*]}; }

get_devices() {
	# against xrandrs wishes, my laptop has only 1 HDMI port.
	laptop=eDP
	external=HDMI
	for dev in laptop external; do
		dev=($name "`xrandr | grep -E "(${!dev}[^\s]+)\sconnected" | awk '{ string=""; n=split($0, a, "[^0-9]"); for (i=0; i<n; ++i) { if ( a[i] ~ /[[:digit:]]+/ ) { if (string != "") { string = string  " "  a[i]} else string = a[i];};} printf("%s %s\n", $1, string);}' | awk -v scale=1 '{printf("%s scale %d %d 0 0 %d %d\n", $1, $8, $9, $4, $5);}'`")
		eval "${!dev}=(${dev[@]})"
		unset dev
	done
}

usage() {
	echo	"usage: $0 [monitor [options per monitor]]"
	[[ $1 =~ ^(m|a|h)$ ]] && echo -e "\tmonitor: laptop/external"
	[[ $1 =~ ^(o|s|p|h)$ ]] && echo -e	"\toptions:"
	[[ $1 =~ ^(o|s|h)$ ]] && echo -e	"\t\t-s | --scale (0 -> 3)"
	[[ $1 =~ ^(o|p|h)$ ]] && echo -e "\t\t-p | --position <l/r/a/b/left/right/above/below>"
	[[ "$1" =~ ^h$ ]] && exit 0 || exit 1
}

parse_args() {
	echo ' ';
}

scale_monitor() {

	monitor_regex="^(laptop|external)$"
	scale_regex="[12](\.[0-9]+)?|0.(0+[1-9]|[1-9][0-9]*)"
	position_regex="left|right|above|below"

	monitor=laptop
	scale=( 1 1 )
	position=left

	[ -n "$1" ] && { monitor=$1; shift; }
	[ -n "$1" ] && { [ "$monitor" == 'laptop' ] && scale[0]=$1 || scale[1]=$1; shift; }
	[ -n "$1" ] && { position=$1; shift; }

	[[ $monitor =~ $monitor_regex ]] || { echo ERROR: invalid monitor; usage m; }
	[[ $scale =~ $scale_regex ]] || { echo ERROR: invalid scale; usage s; }
	[[ $position =~ $position_regex ]] || { echo ERROR: invalid position; usage p; }

	# device=( name 	xdevice	scale	phys_w	phys_h	x_offs	y_offs	width	height	)
	laptop=(eDP ${scale[0]})
	external=(HDMI ${scale[1]})
		

	for name in $monitor `[ $monitor == "external" ] && echo laptop || echo external`; do
		test_function $name
		continue
		#XXX
		xrandr --listmonitors | grep -q $name && xrandr --delmonitor $name
		case $name in
			laptop)		dev=(${laptop[*]})	;;
			external)	dev=(${external[*]});;
		esac
		dev=($name "`xrandr | grep -E "(${dev[0]}[^\s]+)\sconnected" | awk '{ string=""; n=split($0, a, "[^0-9]"); for (i=0; i<n; ++i) { if ( a[i] ~ /[[:digit:]]+/ ) { if (string != "") { string = string  " "  a[i]} else string = a[i];};} printf("%s %s\n", $1, string);}' | awk -vscale=${dev[1]} '{printf("%s scale %d %d 0 0 %d %d\n", $1, $8, $9, $4, $5);}'`")
		case $name in
			laptop)		laptop=(${dev[*]})	;;
			external)	external=(${dev[*]});;
		esac
		if [ "$name" == "${monitor}" ] ; then
			dev[5]=$scale
		fi
		case $position in
			left)
				;;
			right)
				;;
			below)
				;;
			above)
				;;
		esac
		res=(`xrandr | grep -E "${dev[1]}\sconnected" -A1 | tail -n1 | awk -F '(x|\t+| +)' '{print $2; print $3;}'`)
		geom=`python <<< "print('{}/${dev[2]}x{}/${dev[3]}+${dev[4]}+0'.format(int(${res[0]} * ${dev[5]}), int(${res[1]} * ${dev[5]})));"`
		xrandr --setmonitor ${dev[0]} $geom ${dev[1]} --output ${dev[1]} --scale ${dev[5]}
	done
	#feh --bg-fill ~/Desktop/.wallpapers/current.jpg; 
}

[[ $1 =~ ^(-h|--help)$ ]] && usage h
	python <<< "print('{}/__x{}/__+1920+0'.format(int(1920 * $1), int(1080 * $1)));"
	exit 0
scale_monitor "$@"
exit $?


if [ $# -gt 3 ]; then
	usage
	exit -1
elif [ $# -gt 0 ]; then
	regexp="^(left|right|above|below|scale)$"
	if ! [[ $1 =~ $regexp ]]; then	
		echo error: $1 invalid argument
		usage
		exit -1
	elif [ $# -gt 1 ]; then
		regexp="^(laptop|external)$"
		if ! [[ $2 =~ $regexp ]]; then
			echo error: $2 invalid argument: available monitors: laptop, external
			usage
			exit -1
		fi
	fi
fi

if [ "$1" == "scale" ]; then
	shift 
	scale_monitor "$@"
	exit $?
fi

laptop='eDP1'
parsed_data=`xrandr --query | awk -vmain=$laptop '
	BEGIN {n = 0;}
	(n == 1) {
		resolution=$1;
		n = 0;
	}
	(/^[[:alnum:]]/ && $2 == "connected" && $1 != main) {
		secondary=$1;
		n++;}
	END {print secondary, resolution}'`
monitor=${parsed_data% *}
resolution=${parsed_data#* }
wallpaper="/home/bhzsolt/Desktop/.wallpapers/current.jpg"

case $1 in 
	left)		position='--left-of'
		;;
	above)		position='--above'
		;;
	below)		position='--below'
		;;
	right|*)	position='--right-of'
		;;
esac

if [ -n "$monitor" ]; then
	xrandr --output $monitor $position $laptop --mode $resolution
else
	xrandr --output HDMI1 --off
fi

exec feh --bg-fill $wallpaper
